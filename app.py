import streamlit as st
import pandas as pd
from io import BytesIO
import os
from datetime import date, datetime
import traceback
from typing import Optional, Tuple, Dict, Any
import warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Analizador de Maletas T√©cnicas",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Constantes
HISTORIAL_DIR = "historial"
COLUMNAS_ESPERADAS = {
    'dotacion': ['SKU', 'DOTACI√ìN', 'CAJA', 'SECCION', 'N¬∫ ORDEN'],
    'conteo': ['SKU', 'Cantidad'],
    'consumo': ['ID Parte', 'Cantidad', 'Articulo']
}

# Crear directorio de historial
os.makedirs(HISTORIAL_DIR, exist_ok=True)

@st.cache_data
def cargar_dotacion() -> Optional[pd.DataFrame]:
    """Carga el archivo de dotaci√≥n fija con manejo de errores mejorado."""
    try:
        if not os.path.exists("dotacion_fija.xlsx"):
            st.error("‚ùå No se encontr√≥ el archivo 'dotacion_fija.xlsx'. Aseg√∫rate de que est√© en el directorio ra√≠z.")
            return None
        
        df = pd.read_excel("dotacion_fija.xlsx")
        
        # Validar columnas requeridas
        columnas_faltantes = [col for col in COLUMNAS_ESPERADAS['dotacion'] if col not in df.columns]
        if columnas_faltantes:
            st.error(f"‚ùå El archivo dotacion_fija.xlsx no tiene las columnas: {', '.join(columnas_faltantes)}")
            return None
            
        st.success(f"‚úÖ Dotaci√≥n fija cargada: {len(df)} elementos")
        return df
        
    except Exception as e:
        st.error(f"‚ùå Error cargando dotaci√≥n fija: {str(e)}")
        return None

def validar_archivo_conteo(df: pd.DataFrame) -> bool:
    """Valida que el archivo de conteo tenga la estructura correcta."""
    if df is None or df.empty:
        return False
    
    # Verificar que tenga al menos 3 filas y 4 columnas
    if df.shape[0] < 3 or df.shape[1] < 4:
        st.error("‚ùå El archivo de conteo debe tener al menos 3 filas y 4 columnas (A, B, C, D)")
        return False
    
    return True

def validar_archivo_consumo(df: pd.DataFrame) -> bool:
    """Valida que el archivo de consumo tenga las columnas necesarias."""
    if df is None or df.empty:
        return False
    
    columnas_faltantes = [col for col in COLUMNAS_ESPERADAS['consumo'] if col not in df.columns]
    if columnas_faltantes:
        st.error(f"‚ùå El archivo de consumo no tiene las columnas: {', '.join(columnas_faltantes)}")
        return False
    
    return True

def cargar_archivo(nombre: str, tipo: str) -> Optional[pd.DataFrame]:
    """Carga y valida archivos con mejor manejo de errores."""
    archivo = st.file_uploader(
        f"üìÅ Sube el archivo de {nombre}", 
        type=["xlsx", "csv"],
        help=f"Formatos permitidos: Excel (.xlsx) o CSV (.csv)"
    )
    
    if archivo is None:
        return None
    
    try:
        # Leer archivo
        if archivo.name.endswith(".csv"):
            df = pd.read_csv(archivo, encoding='utf-8')
        else:
            df = pd.read_excel(archivo)
        
        # Validar seg√∫n el tipo
        if tipo == 'conteo' and not validar_archivo_conteo(df):
            return None
        elif tipo == 'consumo' and not validar_archivo_consumo(df):
            return None
        
        st.success(f"‚úÖ Archivo {nombre} cargado correctamente: {df.shape[0]} filas, {df.shape[1]} columnas")
        
        # Mostrar preview opcional
        if st.checkbox(f"üëÅÔ∏è Vista previa de {nombre}", key=f"preview_{tipo}"):
            st.dataframe(df.head(10), use_container_width=True)
        
        return df
        
    except Exception as e:
        st.error(f"‚ùå Error cargando {nombre}: {str(e)}")
        st.code(traceback.format_exc())
        return None

def limpiar_datos(dotacion_df: pd.DataFrame, conteo_df: pd.DataFrame, consumo_df: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """Limpia y procesa los datos con mejor manejo de errores."""
    
    with st.spinner("üßπ Limpiando datos..."):
        try:
            # Limpiar dotaci√≥n
            dotacion = dotacion_df[COLUMNAS_ESPERADAS['dotacion']].copy()
            dotacion = dotacion.dropna(subset=["SKU"])
            dotacion['SKU'] = dotacion['SKU'].astype(str).str.strip().str.upper()
            
            # Limpiar conteo (desde fila 3, columnas B y D)
            if conteo_df.shape[0] < 3:
                raise ValueError("El archivo de conteo debe tener al menos 3 filas")
            
            conteo = conteo_df.iloc[2:, [1, 3]].copy()
            conteo.columns = ['SKU', 'Cantidad']
            
            # Convertir cantidad con mejor manejo de errores
            conteo['Cantidad'] = pd.to_numeric(conteo['Cantidad'], errors='coerce')
            valores_invalidos = conteo['Cantidad'].isna().sum()
            if valores_invalidos > 0:
                st.warning(f"‚ö†Ô∏è Se encontraron {valores_invalidos} valores no num√©ricos en el conteo, se establecieron como 0")
            
            conteo['Cantidad'] = conteo['Cantidad'].fillna(0)
            conteo = conteo.dropna(subset=['SKU'])
            conteo['SKU'] = conteo['SKU'].astype(str).str.strip().str.upper()
            
            # Limpiar consumo
            consumo = consumo_df[COLUMNAS_ESPERADAS['consumo']].copy()
            consumo = consumo.dropna(subset=['Articulo'])
            
            # Extraer SKU del art√≠culo con mejor regex
            consumo['SKU'] = consumo['Articulo'].str.extract(r'(^\S+)', expand=False)
            consumo = consumo[['SKU', 'Cantidad', 'ID Parte']].copy()
            consumo['SKU'] = consumo['SKU'].astype(str).str.strip().str.upper()
            consumo['Cantidad'] = pd.to_numeric(consumo['Cantidad'], errors='coerce').fillna(0)
            
            # Mostrar estad√≠sticas de limpieza
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìã SKUs en dotaci√≥n", len(dotacion))
            with col2:
                st.metric("üìä Registros de conteo", len(conteo))
            with col3:
                st.metric("üîß Registros de consumo", len(consumo))
            
            return dotacion, conteo, consumo
            
        except Exception as e:
            st.error(f"‚ùå Error limpiando datos: {str(e)}")
            st.code(traceback.format_exc())
            raise e

def procesar_analisis(dotacion: pd.DataFrame, conteo: pd.DataFrame, consumo: pd.DataFrame) -> pd.DataFrame:
    """Procesa el an√°lisis principal con l√≥gica mejorada."""
    
    with st.spinner("‚öôÔ∏è Procesando an√°lisis..."):
        try:
            # Agregar conteo por SKU
            conteo_agg = conteo.groupby('SKU', as_index=False).agg({
                'Cantidad': 'sum'
            }).rename(columns={'Cantidad': 'Contada'})
            
            # Agregar consumo por SKU
            consumo_agg = consumo.groupby('SKU', as_index=False).agg({
                'Cantidad': 'sum'
            }).rename(columns={'Cantidad': 'Usada'})
            
            # Merge de todos los dataframes
            df = pd.merge(dotacion, conteo_agg, on='SKU', how='outer')
            df = pd.merge(df, consumo_agg, on='SKU', how='outer')
            
            # Rellenar valores nulos
            df[['DOTACI√ìN', 'Contada', 'Usada']] = df[['DOTACI√ìN', 'Contada', 'Usada']].fillna(0)
            
            # Calcular reposici√≥n
            df['Reposici√≥n'] = df['DOTACI√ìN'] - df['Contada']
            
            # Obtener IDs de origen de consumo
            consumo_ids = consumo.groupby('SKU')['ID Parte'].apply(
                lambda x: ', '.join(sorted(set(str(id_parte) for id_parte in x if pd.notna(id_parte))))
            ).reset_index()
            consumo_ids.rename(columns={'ID Parte': 'Origen de la diferencia'}, inplace=True)
            df = pd.merge(df, consumo_ids, on='SKU', how='left')
            
            # Aplicar l√≥gica de diagn√≥stico mejorada
            def diagnostico_mejorado(row):
                repos = row['Reposici√≥n']
                usada = row['Usada']
                
                if repos == 0 and usada == 0:
                    return "‚úÖ Completo"
                elif abs(repos - usada) <= 0.01:  # Tolerancia para errores de redondeo
                    return "‚úÖ OK"
                elif repos > usada:
                    diferencia = repos - usada
                    return f"‚ùå Faltan {int(diferencia)} piezas sin justificar"
                elif repos < usada:
                    diferencia = usada - repos
                    return f"‚ö†Ô∏è Consumo excesivo: +{int(diferencia)} desde almac√©n"
                else:
                    return "üîç Revisi√≥n necesaria"
            
            def origen_diferencia_mejorado(row):
                if pd.notna(row['Origen de la diferencia']) and row['Origen de la diferencia'].strip():
                    return row['Origen de la diferencia']
                elif row['Usada'] > 0:
                    return "üìù Consumo no registrado"
                elif row['Contada'] > row['DOTACI√ìN']:
                    return "üì¶ Exceso en inventario"
                elif row['Contada'] > 0:
                    return "üëÅÔ∏è Solo en conteo f√≠sico"
                else:
                    return "‚ùì Sin datos"
            
            df['Diagn√≥stico'] = df.apply(diagnostico_mejorado, axis=1)
            df['Origen de la diferencia'] = df.apply(origen_diferencia_mejorado, axis=1)
            
            # Extraer ubicaci√≥n del SKU
            df['Ubicaci√≥n'] = df['SKU'].str.extract(r'^\d{3}-(\w+)-\d+', expand=False)
            df['Ubicaci√≥n'] = df['Ubicaci√≥n'].fillna('SIN_UBICACION')
            
            # Ordenar por ubicaci√≥n y SKU
            df = df.sort_values(['Ubicaci√≥n', 'SKU']).reset_index(drop=True)
            
            # Seleccionar y reordenar columnas finales
            columnas_finales = [
                'SKU', 'CAJA', 'SECCION', 'N¬∫ ORDEN', 'Ubicaci√≥n',
                'DOTACI√ìN', 'Contada', 'Usada', 'Reposici√≥n', 
                'Diagn√≥stico', 'Origen de la diferencia'
            ]
            
            return df[columnas_finales]
            
        except Exception as e:
            st.error(f"‚ùå Error en el procesamiento: {str(e)}")
            st.code(traceback.format_exc())
            raise e

def mostrar_metricas_resumen(df: pd.DataFrame):
    """Muestra m√©tricas de resumen del an√°lisis."""
    
    st.subheader("üìä Resumen del An√°lisis")
    
    # M√©tricas principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã SKUs Total", len(df))
    
    with col2:
        ok_count = len(df[df['Diagn√≥stico'].str.contains('‚úÖ')])
        st.metric("‚úÖ Estado OK", ok_count)
    
    with col3:
        faltan_count = len(df[df['Diagn√≥stico'].str.contains('‚ùå')])
        st.metric("‚ùå Faltan Piezas", faltan_count)
    
    with col4:
        exceso_count = len(df[df['Diagn√≥stico'].str.contains('‚ö†Ô∏è')])
        st.metric("‚ö†Ô∏è Consumo Excesivo", exceso_count)
    
    with col5:
        reposicion_total = df[df['Reposici√≥n'] > 0]['Reposici√≥n'].sum()
        st.metric("üîß Total a Reponer", int(reposicion_total))
    
    # Gr√°fico de diagn√≥sticos
    if len(df) > 0:
        st.subheader("üìà Distribuci√≥n de Diagn√≥sticos")
        diagnosticos = df['Diagn√≥stico'].value_counts()
        st.bar_chart(diagnosticos)

def generar_nombre_archivo(tecnico: str, fecha_inicio: date, fecha_fin: date) -> str:
    """Genera nombre de archivo estandarizado."""
    tecnico_clean = tecnico.lower().replace(' ', '_').replace('√±', 'n')
    timestamp = datetime.now().strftime("%H%M")
    return f"{tecnico_clean}_{fecha_inicio}_a_{fecha_fin}_{timestamp}.xlsx"

def exportar_a_excel(df: pd.DataFrame, nombre_archivo: str, tecnico: str, fecha_inicio: date, fecha_fin: date) -> BytesIO:
    """Exporta los resultados a Excel con formato mejorado."""
    
    output = BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # Hoja principal con resultados
        df.to_excel(writer, sheet_name='An√°lisis Detallado', index=False)
        
        # Hoja de resumen
        resumen_data = {
            'M√©trica': ['SKUs Total', 'Estado OK', 'Faltan Piezas', 'Consumo Excesivo', 'Total a Reponer'],
            'Valor': [
                len(df),
                len(df[df['Diagn√≥stico'].str.contains('‚úÖ')]),
                len(df[df['Diagn√≥stico'].str.contains('‚ùå')]),
                len(df[df['Diagn√≥stico'].str.contains('‚ö†Ô∏è')]),
                int(df[df['Reposici√≥n'] > 0]['Reposici√≥n'].sum())
            ]
        }
        resumen_df = pd.DataFrame(resumen_data)
        resumen_df.to_excel(writer, sheet_name='Resumen', index=False)
        
        # Hoja de metadatos
        metadata = pd.DataFrame({
            'Campo': ['T√©cnico', 'Fecha Inicio', 'Fecha Fin', 'Fecha An√°lisis', 'Total SKUs'],
            'Valor': [tecnico, fecha_inicio, fecha_fin, datetime.now().strftime("%Y-%m-%d %H:%M"), len(df)]
        })
        metadata.to_excel(writer, sheet_name='Metadatos', index=False)
    
    output.seek(0)
    return output

# Interfaz principal
def main():
    st.title("üîß Analizador de Maletas T√©cnicas - Reposici√≥n")
    st.markdown("### Sistema avanzado de control de inventario y reposici√≥n")
    
    # Men√∫ lateral
    menu = st.sidebar.radio(
        "üìã Men√∫ Principal", 
        ["üìä Nuevo an√°lisis", "üìÇ Historial", "‚ÑπÔ∏è Ayuda"],
        index=0
    )
    
    if menu == "üìä Nuevo an√°lisis":
        st.header("üìä Nuevo An√°lisis de Reposici√≥n")
        
        # Informaci√≥n del an√°lisis
        with st.expander("üìã Informaci√≥n del an√°lisis", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                tecnico = st.selectbox(
                    "üë®‚Äçüîß T√©cnico responsable", 
                    ["Francisco Javier", "Rigoberto"],
                    help="Selecciona el t√©cnico responsable del an√°lisis"
                )
                fecha_inicio = st.date_input("üìÖ Desde:", value=date.today())
            
            with col2:
                fecha_fin = st.date_input("üìÖ Hasta:", value=date.today())
                if fecha_fin < fecha_inicio:
                    st.error("‚ùå La fecha fin debe ser posterior a la fecha inicio")
                    return
        
        st.divider()
        
        # Carga de archivos
        st.header("üìÅ Carga de Archivos")
        
        # Dotaci√≥n fija (autom√°tica)
        with st.expander("üìã Dotaci√≥n Fija", expanded=False):
            dotacion_df = cargar_dotacion()
            if dotacion_df is None:
                st.stop()
        
        # Archivos del usuario
        col1, col2 = st.columns(2)
        
        with col1:
            with st.expander("üìä Conteo F√≠sico", expanded=True):
                st.info("üí° El archivo debe tener SKUs en columna B y cantidades en columna D (las primeras 2 filas se ignoran)")
                conteo_df = cargar_archivo("conteo f√≠sico", "conteo")
        
        with col2:
            with st.expander("üîß Consumo Registrado", expanded=True):
                st.info("üí° Debe contener columnas: 'ID Parte', 'Cantidad', 'Articulo'")
                consumo_df = cargar_archivo("consumo registrado", "consumo")
        
        # Procesar an√°lisis
        if conteo_df is not None and consumo_df is not None and dotacion_df is not None:
            st.divider()
            
            if st.button("üöÄ Procesar An√°lisis", type="primary", use_container_width=True):
                try:
                    # Limpiar datos
                    dotacion, conteo, consumo = limpiar_datos(dotacion_df, conteo_df, consumo_df)
                    
                    # Procesar an√°lisis
                    resultado = procesar_analisis(dotacion, conteo, consumo)
                    
                    st.success("‚úÖ An√°lisis completado exitosamente")
                    
                    # Mostrar m√©tricas
                    mostrar_metricas_resumen(resultado)
                    
                    # Mostrar tabla con filtros
                    st.subheader("üìã Resultados Detallados")
                    
                    # Filtros
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        ubicaciones = ['Todas'] + sorted(resultado['Ubicaci√≥n'].unique().tolist())
                        filtro_ubicacion = st.selectbox("üè∑Ô∏è Filtrar por Ubicaci√≥n", ubicaciones)
                    
                    with col2:
                        diagnosticos = ['Todos'] + sorted(resultado['Diagn√≥stico'].unique().tolist())
                        filtro_diagnostico = st.selectbox("üîç Filtrar por Diagn√≥stico", diagnosticos)
                    
                    with col3:
                        solo_reposicion = st.checkbox("üîß Solo items que requieren reposici√≥n")
                    
                    # Aplicar filtros
                    df_filtrado = resultado.copy()
                    
                    if filtro_ubicacion != 'Todas':
                        df_filtrado = df_filtrado[df_filtrado['Ubicaci√≥n'] == filtro_ubicacion]
                    
                    if filtro_diagnostico != 'Todos':
                        df_filtrado = df_filtrado[df_filtrado['Diagn√≥stico'] == filtro_diagnostico]
                    
                    if solo_reposicion:
                        df_filtrado = df_filtrado[df_filtrado['Reposici√≥n'] > 0]
                    
                    # Mostrar tabla filtrada
                    st.dataframe(
                        df_filtrado, 
                        use_container_width=True,
                        hide_index=True,
                        column_config={
                            "Diagn√≥stico": st.column_config.TextColumn(
                                "Diagn√≥stico",
                                help="Estado del item seg√∫n el an√°lisis"
                            ),
                            "Reposici√≥n": st.column_config.NumberColumn(
                                "Reposici√≥n",
                                help="Cantidad que debe reponerse",
                                format="%d"
                            )
                        }
                    )
                    
                    # Guardar y descargar
                    st.divider()
                    
                    nombre_archivo = generar_nombre_archivo(tecnico, fecha_inicio, fecha_fin)
                    path_archivo = os.path.join(HISTORIAL_DIR, nombre_archivo)
                    
                    # Guardar en historial
                    try:
                        excel_data = exportar_a_excel(resultado, nombre_archivo, tecnico, fecha_inicio, fecha_fin)
                        
                        # Guardar archivo en historial
                        with open(path_archivo, 'wb') as f:
                            f.write(excel_data.getvalue())
                        
                        # Bot√≥n de descarga
                        st.download_button(
                            "üì• Descargar An√°lisis Completo",
                            data=excel_data.getvalue(),
                            file_name=nombre_archivo,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            type="primary",
                            use_container_width=True
                        )
                        
                        st.success(f"üíæ An√°lisis guardado en historial: {nombre_archivo}")
                        
                    except Exception as e:
                        st.error(f"‚ùå Error guardando archivo: {str(e)}")
                
                except Exception as e:
                    st.error(f"‚ùå Error durante el an√°lisis: {str(e)}")
                    with st.expander("üîç Detalles del error"):
                        st.code(traceback.format_exc())
    
    elif menu == "üìÇ Historial":
        st.header("üìÅ Historial de An√°lisis")
        
        try:
            archivos = [f for f in os.listdir(HISTORIAL_DIR) if f.endswith('.xlsx')]
            archivos = sorted(archivos, reverse=True)  # M√°s recientes primero
            
            if not archivos:
                st.info("üì≠ No hay an√°lisis previos guardados")
                return
            
            # Selecci√≥n de archivo
            seleccion = st.selectbox(
                "üìã Selecciona un an√°lisis:", 
                archivos,
                help="Los archivos est√°n ordenados del m√°s reciente al m√°s antiguo"
            )
            
            if seleccion:
                path_completo = os.path.join(HISTORIAL_DIR, seleccion)
                
                try:
                    # Leer metadatos si existen
                    with pd.ExcelWriter(path_completo, mode='a') as writer:
                        pass  # Solo para verificar que el archivo es v√°lido
                    
                    # Mostrar informaci√≥n del archivo
                    info_archivo = os.stat(path_completo)
                    fecha_creacion = datetime.fromtimestamp(info_archivo.st_mtime)
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.info(f"üìÖ Creado: {fecha_creacion.strftime('%Y-%m-%d %H:%M')}")
                    with col2:
                        st.info(f"üìè Tama√±o: {info_archivo.st_size / 1024:.1f} KB")
                    
                    # Leer y mostrar datos
                    df_hist = pd.read_excel(path_completo, sheet_name='An√°lisis Detallado')
                    
                    # Mostrar m√©tricas del historial
                    mostrar_metricas_resumen(df_hist)
                    
                    # Mostrar tabla
                    st.subheader(f"üìã Vista previa: {seleccion}")
                    st.dataframe(df_hist, use_container_width=True, hide_index=True)
                    
                    # Bot√≥n de descarga
                    with open(path_completo, 'rb') as f:
                        st.download_button(
                            "üì• Descargar este an√°lisis",
                            data=f.read(),
                            file_name=seleccion,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    
                    # Opci√≥n para eliminar
                    if st.button("üóëÔ∏è Eliminar este an√°lisis", type="secondary"):
                        if st.checkbox("‚ö†Ô∏è Confirmar eliminaci√≥n"):
                            os.remove(path_completo)
                            st.success("‚úÖ An√°lisis eliminado")
                            st.rerun()
                
                except Exception as e:
                    st.error(f"‚ùå Error leyendo el archivo: {str(e)}")
        
        except Exception as e:
            st.error(f"‚ùå Error accediendo al historial: {str(e)}")
    
    elif menu == "‚ÑπÔ∏è Ayuda":
        st.header("‚ÑπÔ∏è Gu√≠a de Uso")
        
        with st.expander("üìã ¬øC√≥mo usar el sistema?", expanded=True):
            st.markdown("""
            ### Pasos para realizar un an√°lisis:
            
            1. **üìä Nuevo an√°lisis** - Selecciona esta opci√≥n en el men√∫
            2. **üë®‚Äçüîß T√©cnico** - Elige el t√©cnico responsable
            3. **üìÖ Fechas** - Define el per√≠odo de an√°lisis
            4. **üìÅ Archivos** - Sube los archivos requeridos:
               - **Conteo f√≠sico**: Excel/CSV con SKUs en columna B y cantidades en columna D
               - **Consumo registrado**: Excel/CSV con columnas 'ID Parte', 'Cantidad', 'Articulo'
            5. **üöÄ Procesar** - Haz clic en "Procesar An√°lisis"
            6. **üì• Descargar** - Descarga los resultados en Excel
            """)
        
        with st.expander("üìÅ Formato de archivos"):
            st.markdown("""
            ### Archivo de Conteo F√≠sico:
            - Las **primeras 2 filas se ignoran** (pueden ser encabezados)
            - **Columna B**: SKU del producto
            - **Columna D**: Cantidad contada
            - Formato: `123-ABCDE-5678` (SKU) | `5` (cantidad)
            
            ### Archivo de Consumo:
            - **ID Parte**: Identificador del trabajo/orden
            - **Cantidad**: Cantidad consumida
            - **Articulo**: Descripci√≥n que contiene el SKU
            """)
        
        with st.expander("üîç Interpretaci√≥n de diagn√≥sticos"):
            st.markdown("""
            - **‚úÖ OK/Completo**: Todo en orden
            - **‚ùå Faltan X piezas**: Hay faltantes sin justificar
            - **‚ö†Ô∏è Consumo excesivo**: Se consumi√≥ m√°s de lo esperado
            - **üîç Revisi√≥n necesaria**: Requiere verificaci√≥n manual
            """)
        
        with st.expander("üí° Consejos y buenas pr√°cticas"):
            st.markdown("""
            - Revisa la vista previa de los archivos antes de procesarlos
            - Usa nombres descriptivos para los t√©cnicos y fechas precisas
            - Los an√°lisis se guardan autom√°ticamente en el historial
            - Puedes filtrar los resultados por ubicaci√≥n o diagn√≥stico
            - El sistema maneja autom√°ticamente SKUs duplicados (los suma)
            """)

if __name__ == "__main__":
    main()